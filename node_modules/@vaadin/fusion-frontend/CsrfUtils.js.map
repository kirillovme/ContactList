{"version":3,"file":"CsrfUtils.js","sourceRoot":"","sources":["src/CsrfUtils.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,kBAAkB,GAAG,cAAc,CAAC;AACjD,MAAM,CAAC,MAAM,uBAAuB,GAAG,WAAW,CAAC;AACnD,MAAM,CAAC,MAAM,uBAAuB,GAAG,YAAY,CAAC;AAEpD,SAAS,8BAA8B,CAAC,GAAa;IACnD,MAAM,UAAU,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,2BAA2B,CAAC,CAAC;IACvE,OAAO,CAAC,UAAU,IAAK,UAA8B,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;AACvE,CAAC;AAED,SAAS,6BAA6B,CAAC,GAAa;IAClD,MAAM,SAAS,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;IAC/D,OAAO,CAAC,SAAS,IAAK,SAA6B,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;AACrE,CAAC;AAED,SAAS,cAAc,CAAC,UAAkB;IACxC,MAAM,MAAM,GAAG,GAAG,UAAU,GAAG,CAAC;IAChC,OAAO,CACL,QAAQ,CAAC,MAAM;SACZ,KAAK,CAAC,OAAO,CAAC;SACd,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;SAC7C,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CACzD,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,GAAa;IAC7C,MAAM,UAAU,GAAG,8BAA8B,CAAC,GAAG,CAAC,CAAC;IACvD,IAAI,IAAI,GAAG,cAAc,CAAC,uBAAuB,CAAC,CAAC;IACnD,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,IAAI,GAAG,6BAA6B,CAAC,GAAG,CAAC,CAAC;KAC3C;IACD,MAAM,OAAO,GAA2B,EAAE,CAAC;IAC3C,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC5C,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;QACrB,OAAO,CAAC,YAAY,GAAG,UAAU,CAAC;KACnC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,uCAAuC,CAAC,GAAa;IACnE,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACxC,MAAM,OAAO,GAA2B,EAAE,CAAC;IAC3C,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,YAAY,EAAE;QAC3C,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;KACjD;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,qCAAqC,CAAC,GAAa;IACjE,MAAM,OAAO,GAA2B,EAAE,CAAC;IAE3C,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACxC,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,YAAY,EAAE;QAC3C,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC;KACjD;SAAM;QACL,OAAO,CAAC,kBAAkB,CAAC,GAAG,cAAc,CAAC,uBAAuB,CAAC,CAAC;KACvE;IAED,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["export const VAADIN_CSRF_HEADER = 'X-CSRF-Token';\nexport const VAADIN_CSRF_COOKIE_NAME = 'csrfToken';\nexport const SPRING_CSRF_COOKIE_NAME = 'XSRF-TOKEN';\n\nfunction getSpringCsrfHeaderFromMetaTag(doc: Document): string {\n  const csrfHeader = doc.head.querySelector('meta[name=\"_csrf_header\"]');\n  return (csrfHeader && (csrfHeader as HTMLMetaElement).content) || '';\n}\n\nfunction getSpringCsrfTokenFromMetaTag(doc: Document): string {\n  const csrfToken = doc.head.querySelector('meta[name=\"_csrf\"]');\n  return (csrfToken && (csrfToken as HTMLMetaElement).content) || '';\n}\n\nfunction getCookieValue(cookieName: string): string {\n  const prefix = `${cookieName}=`;\n  return (\n    document.cookie\n      .split(/;[ ]?/)\n      .filter((cookie) => cookie.startsWith(prefix))\n      .map((cookie) => cookie.slice(prefix.length))[0] || ''\n  );\n}\n\nexport function getSpringCsrfInfo(doc: Document): Record<string, string> {\n  const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);\n  let csrf = getCookieValue(SPRING_CSRF_COOKIE_NAME);\n  if (csrf.length === 0) {\n    csrf = getSpringCsrfTokenFromMetaTag(doc);\n  }\n  const headers: Record<string, string> = {};\n  if (csrf.length > 0 && csrfHeader.length > 0) {\n    headers._csrf = csrf;\n    headers._csrf_header = csrfHeader;\n  }\n  return headers;\n}\n\nexport function getSpringCsrfTokenHeadersForAuthRequest(doc: Document): Record<string, string> {\n  const csrfInfo = getSpringCsrfInfo(doc);\n  const headers: Record<string, string> = {};\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  }\n  return headers;\n}\n\nexport function getCsrfTokenHeadersForEndpointRequest(doc: Document): Record<string, string> {\n  const headers: Record<string, string> = {};\n\n  const csrfInfo = getSpringCsrfInfo(doc);\n  if (csrfInfo._csrf && csrfInfo._csrf_header) {\n    headers[csrfInfo._csrf_header] = csrfInfo._csrf;\n  } else {\n    headers[VAADIN_CSRF_HEADER] = getCookieValue(VAADIN_CSRF_COOKIE_NAME);\n  }\n\n  return headers;\n}\n"]}