export const VAADIN_CSRF_HEADER = 'X-CSRF-Token';
export const VAADIN_CSRF_COOKIE_NAME = 'csrfToken';
export const SPRING_CSRF_COOKIE_NAME = 'XSRF-TOKEN';
function getSpringCsrfHeaderFromMetaTag(doc) {
    const csrfHeader = doc.head.querySelector('meta[name="_csrf_header"]');
    return (csrfHeader && csrfHeader.content) || '';
}
function getSpringCsrfTokenFromMetaTag(doc) {
    const csrfToken = doc.head.querySelector('meta[name="_csrf"]');
    return (csrfToken && csrfToken.content) || '';
}
function getCookieValue(cookieName) {
    const prefix = `${cookieName}=`;
    return (document.cookie
        .split(/;[ ]?/)
        .filter((cookie) => cookie.startsWith(prefix))
        .map((cookie) => cookie.slice(prefix.length))[0] || '');
}
export function getSpringCsrfInfo(doc) {
    const csrfHeader = getSpringCsrfHeaderFromMetaTag(doc);
    let csrf = getCookieValue(SPRING_CSRF_COOKIE_NAME);
    if (csrf.length === 0) {
        csrf = getSpringCsrfTokenFromMetaTag(doc);
    }
    const headers = {};
    if (csrf.length > 0 && csrfHeader.length > 0) {
        headers._csrf = csrf;
        headers._csrf_header = csrfHeader;
    }
    return headers;
}
export function getSpringCsrfTokenHeadersForAuthRequest(doc) {
    const csrfInfo = getSpringCsrfInfo(doc);
    const headers = {};
    if (csrfInfo._csrf && csrfInfo._csrf_header) {
        headers[csrfInfo._csrf_header] = csrfInfo._csrf;
    }
    return headers;
}
export function getCsrfTokenHeadersForEndpointRequest(doc) {
    const headers = {};
    const csrfInfo = getSpringCsrfInfo(doc);
    if (csrfInfo._csrf && csrfInfo._csrf_header) {
        headers[csrfInfo._csrf_header] = csrfInfo._csrf;
    }
    else {
        headers[VAADIN_CSRF_HEADER] = getCookieValue(VAADIN_CSRF_COOKIE_NAME);
    }
    return headers;
}
//# sourceMappingURL=CsrfUtils.js.map